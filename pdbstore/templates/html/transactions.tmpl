<!DOCTYPE html>
<html lan="en">

<head>
    <title>pdbstore | {{report.store.rootdir}}</title>
    <meta http-Equiv="Cache-Control" Content="no-cache" />
    <meta http-Equiv="Pragma" Content="no-cache" />
    <meta http-Equiv="Expires" Content="0" />
    <meta charset="utf-8">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap4.min.css">
    <style>
        .dt-control { font-family: "Helvetica,Arial,sans-serif" }; 
        table.dataTable th.dt-control {text-align: center; cursor: pointer;}
        table.dataTable th.dt-control::before {display: inline-block; color: rgba(0, 0, 0, 0.5); content: "\25BA";}
        table.dataTable tr.dt-hasChild th.dt-control:before { content: "\25BC"; }          
        div.dataTables_wrapper div.dataTables_length input { display: inline-block; width: auto; }
    </style>

</head>

<body style="font-size: 0.9rem">
    <div class="container-fluid">
        <h1 style="font-size: 2rem;">{%- if report.store_name %}[{{report.store_name}}]&nbsp;&nbsp;{%- endif %}{{report.store.rootdir}}</h1>
        <div class="info">
            <p>
                You can obtain the list of files for a transaction only if the transaction has not been deleted yet.
            </p>
            <p>
                You can sort and filter all columns and you can also use <em>Filter files</em> input to filter transactions based on file name.
            </p>
        </div>
        <table id="results" class="table table-striped table-bordered" style="width:100%">
            <thead>
                <tr>
                    <th class="dt-control sorting_disabled"></th>
                    <th>Transaction ID</th>
                    <th>Status</th>
                    <th>Count</th>
                    <th>Product name</th>
                    <th>Product version</th>
                    <th title="Includes files that have not been referenced by another transaction yet">Disk (in Mb)</th>
                    <th title="Includes files that have been already referenced by another transaction">Shared (in Mb)</th>
                </tr>
            </thead>
            <tbody>

            </tbody>
            <tfoot>
                <tr>
                    <th class="td-control"></th>
                    <th>transaction</th>
                    <th data-select=",active,deleted">status</th>
                    <th>count</th>
                    <th>product</th>
                    <th>version</th>
                    <th>Disk</th>
                    <th>Shared</th>
                </tr>
            </tfoot>
        </table>
    </div>
    <footer>
        <div class="container-fluid">
            <div class="info">
                <p>
                    Generated by pdbstore <b>v{{report.__version__}}</b>{{generation_time()}}, on {{report.now}}
                </p>
            </div>
        </div>
    </footer>
    <script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap4.min.js"></script>
</body>
<script>

    const dataSet = [
    {%- for key, value in report.statistics | dictsort %}
    {%- set files = value.files | sort(attribute='path') %}
    {%- set files_count = value.files| count %}
        ["", "{{key[0]}}","{{value.status}}","{{key[1]}}","{{value.product}}","{{value.version}}",{{"%.3f"|format(value.disk_space/1024/1024)}},{{"%.3f"|format(value.shared_space/1024/1024)}}],
    {%- endfor%}
    ];

    const fileSet = {
    {%- for key, value in report.statistics | dictsort %}
    {%- set files = value.files | sort(attribute='path') %}
    {%- if value.files_count > 0 %}
        "{{key[0]}}": [
        {%- for file in files %}
        "{{ "%-30s"|format(files[0].path) | replace("\\", "\\\\")}} ({{"%.3f"|format(files[0].size/1024/1024)}} Mb)"{%- if not loop.last %},{%- endif %}
        {%- endfor %}
        ]{%- if not loop.last %},{%- endif %}
    {%- endif %}
    {%- endfor%}
    };

    $(document).ready(function () {
        // Setup - add a text input to each footer cell
        $('#results tfoot th').each(function () {
            if(!$(this).hasClass('td-control')) {
                var title = $(this).text();
                var title_id = title.replace('.', '_');
                if($(this).data('select')) {
                    var content = '<select id="filter-select" class="custom-select custom-select-sm form-control form-control-sm">';
                    $(this).data('select').split(',').forEach(function (s) {
                        content += '<option value="' + s + '">' + s + '</option>';
                    });
                    content += '</select>';
                    $(this).html(content)
                }
                else {
                    $(this).html('<input type="text" id="filter-input-' + title_id + '" class="form-control form-control-sm filter-input" placeholder="Filter ' + title + '" style="width:100%"/>');
                }
            }
        });

        var table = $('#results').DataTable({
            "dom": "lrtip",
            "lengthMenu": [[1, 10, 25, 50, 100, 200, -1], [1, 10, 25, 50, 100, 200, "All"]],
            "pageLength": 25,
            "columns": [{className: 'dt-control', orderable: false}, {orderable: true}, null, null, null, null, null, null],
            "order": [[1, 'desc']],
            data: dataSet

        });

        // Apply the search
        table.columns().every(function () {
            var that = this;

            $('input', this.footer()).on('keyup change clear', function () {
                if (that.search() !== this.value) {
                    that
                        .search(this.value)
                        .draw();
                }
            });

            $('select', this.footer()).on('change', function() {
                if (that.search() !== this.value) {
                    that
                        .search(this.value)
                        .draw();
                }
           });    
        });

        // Add event listener for opening and closing details
        table.on('click', 'td.dt-control', function (e) {
            let tr = e.target.closest('tr');
            let row = table.row(tr);
            let td = $(e.target).closest('td').next('td');
        
            if (row.child.isShown()) {
                // This row is already open - close it
                row.child.hide();
            }
            else {
                // Open this row
                if(td.text() in fileSet) {
                    row.child(fileSet[td.text()]).show();
                } /* else {
                    row.child("no information").show();
                } */
            }
        }).on('click', 'th.dt-control', function (e) {
            let parent = $(e.target).parent()
            let collapse = parent.hasClass('dt-hasChild');
            parent.toggleClass('dt-hasChild');
            table.rows().every(function(idx){
                var row = table.row( idx );
                var trans_id = row.data()[1];
                var trans_status = row.data()[2];
                if(trans_status != 'deleted' && trans_id in fileSet) {
                    if(collapse) {
                        row.child.hide();
                    }
                    else
                        row.child(fileSet[trans_id]).show();
                }
            });
        });

        var MatchingPrevious =  "";

        // Custom range filtering function
        DataTable.ext.search.push(function (settings, data, dataIndex) {
            if(MatchingPrevious == "")
                return true;
            var trans_id = data[1];
            var trans_status = data[2];
            if(trans_status == 'deleted' || !(trans_id in fileSet)) {
                return false;
            }
            valci = MatchingPrevious.toLowerCase()
            if(fileSet[trans_id].filter((f) => f.toLowerCase().indexOf(valci) !== -1).length>0) {
                openMatchingChild(valci)
                return true;
            }
            return false;
        });
 
        $('#results_length').append('<label style="padding-left: 3rem">Files <input type="text" id="filter-input-files" class="form-control filter-input" placeholder="Filter files" style="width:100%"></label>')
        $('#filter-input-files').on('keyup clear', function () {
            if(MatchingPrevious !== this.value) {
                MatchingPrevious =  this.value;
                table.draw();
            }
        });

        function openMatchingChild(val) {
            var table = $('#results').DataTable();
            var valci = val.toLowerCase();

            // Get array of row indexes matching search
            var indexes = table
                .rows({page: 'current'})
                .indexes()
                .filter( function ( value, index ) {
                    var row = table.row(value);
                    var trans_id = row.data()[1];
                    var trans_status = row.data()[2];
                    if(val == "" || trans_status == 'deleted' || !(trans_id in fileSet)) {
                        return false
                    }
                    return fileSet[trans_id].filter((f) => f.toLowerCase().indexOf(valci) != -1).length>0
                } )
                .toArray(); 
        
            // Close all rows
            table.rows({page: 'current'}).every(function(){
                // If row has details expanded
                $(this).removeClass('shown');
                if(this.child.isShown()){
                    // Collapse row details
                    this.child.hide();
                    $(this.node()).removeClass('shown');
                }
            });
        
            // Open rows(indexes) that match criteria
            table.rows(indexes).every(function(){
                // If row has details expanded
                    // Collapse row details
                    var trans_id = this.data()[1];
                    var trans_status = this.data()[2];
                    if(trans_status != 'deleted' && trans_id in fileSet) {
                        if(this.child.isShown()) {
                            this.child.hide();
                        }
                        else {
                            this.child(fileSet[trans_id]).show();
                        }
                    }
    
                    $(this.node()).addClass('shown');
                    $(this).addClass('shown');
            });
        }
    });
</script>

</html>